#include "imports/stdlib.fc";

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> tuple tuples::tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}


(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    tuple moves = to_tuple([[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]]);
    tuple wave = empty_tuple();
    tuple stack = null();
    tuple start_point = empty_tuple();
    tuple end_point = empty_tuple();
    int i = 0;
    while (i < n){
        int j = 0;
        tuple row = empty_tuple();
        while (j < m) {
            row~tpush(-1);
            slice s = maze.at(i).at(j);
            int char = s~load_uint(8);
            if (char == 83) {
                start_point = to_tuple([i, j]);
            } elseif (char == 69){
                end_point = to_tuple([i, j]);
            }
            j += 1;
        }
        wave~tpush(row);
        i += 1;
    }
    stack~push_back(triple(start_point.first(), start_point.second(), 0));
    wave = wave.tuples::tset(start_point.first(), wave.at(start_point.first()).tuples::tset(start_point.second(), 0));

    while (~ stack.is_null()){
        (int i, int j, int current_wave) = untriple(stack~pop_back());
        int mv = 0;
        while (mv < 8) {
            (int new_i, int new_j) = (i + moves.at(mv).at(0), j + moves.at(mv).at(1));
            if ((0 <= new_i) & (new_i < n) & (0 <= new_j) & (new_j < m)){
                slice s = maze.at(new_i).at(new_j);
                if (s~load_uint(8) != 88) {
                    wave = wave.tuples::tset(new_i, wave.at(new_i).tuples::tset(new_j, current_wave + 1));
                    stack~push_back(triple(new_i, new_j, current_wave));
                }
            }
            mv += 1;
        }
    }

    if (wave.at(end_point.first()).at(end_point.second()) == -1){
        return (-1, 0, 0, null());
    }

    (int current_row, int current_col) = (end_point.first(), end_point.second());

    int l = 0;

    while ((current_row != start_point.first()) & (current_col != start_point.second())){
        if ((current_row != end_point.first()) & (current_col != end_point.second())){
            maze = maze.tuples::tset(current_row, maze.at(current_row).tuples::tset(current_col, begin_cell().store_uint(33, 8).end_cell().begin_parse()));
        }
        int mv = 0;
        while (mv < 8) {
            (int new_i, int new_j) = (current_row + moves.at(mv).at(0), current_col + moves.at(mv).at(1));
            if ((0 <= new_i) & (new_i < n) & (0 <= new_j) & (new_j < m)){
                if (wave.at(new_i).at(new_j) == wave.at(current_row).at(current_col) - 1) {
                    current_row = new_i;
                    current_col = new_j;
                    l += 1;
                    mv = 8;
                }
            }
            mv += 1;
        }

    }

    return (-1, 1, 7, maze);
}