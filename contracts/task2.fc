#include "imports/stdlib.fc";

int equal_slices (slice a, slice b) asm "SDEQ";

(slice, cell) load_data () inline {
    var ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_dict());
}

() save_data (slice admin, cell users) impure inline {
    set_data(begin_cell().store_slice(admin).store_dict(users).end_cell());
}

int get_amount(int share, int amount) inline {
    (_, cell users) = load_data();
    int total = 0;
    (int key, slice val, int flag) = users.udict_get_min?(256);
    while(flag){
        total = total + val~load_uint(32);
        (key, val, flag) = users.udict_get_next?(256, key);
    }
    return share * amount / total;
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 32) {
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) {
    return ();
  }
  slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
    (slice admin, cell users) = load_data();

    if (op == 0x368ddef3) {
        slice address = in_msg_body~load_msg_addr();
        (_, int u) = parse_std_addr(address);
        int share = in_msg_body~load_uint(32);
        throw_if(120, ~ equal_slices(admin, sender_address));
        users~udict_set(256, u, begin_cell().store_uint(share, 32).end_cell().begin_parse());
        save_data(admin, users);
    }

    if (op == 0x278205c8) {
        slice address = in_msg_body~load_msg_addr();
        (_, int u) = parse_std_addr(address);
        throw_if(120, ~ equal_slices(admin, sender_address));
        (slice value, int flag) = users~udict_delete_get?(256, u);
        if (~ flag) {
            throw(121);
        }
        save_data(admin, users);
    }

    if (op == 0x068530b3) {
        if (users.dict_empty?()) {
            throw(122);
        }
        (int key, slice val, int flag) = users.udict_get_min?(256);
        while(flag){
            slice addr = begin_cell().store_uint(4, 3)
                .store_uint(0, 8)
                .store_uint(key, 256)
                .end_cell().begin_parse();
            cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(addr)
                .store_coins(get_amount(val~load_uint(32), msg_value))
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
            .end_cell();
            send_raw_message(msg, 1);
            (key, val, flag) = users.udict_get_next?(256, key);
        }


    }

    if (op == 0x7362d09c) {
        if (users.dict_empty?()) {
            throw(122);
        }

        int amount = in_msg_body~load_coins();

        (int key, slice val, int flag) = users.udict_get_min?(256);
        while(flag){
            slice addr = begin_cell().store_uint(4, 3)
                .store_uint(0, 8)
                .store_uint(key, 256)
                .end_cell().begin_parse();


            int jetton_amount = get_amount(val~load_uint(32), amount);

            cell body = begin_cell()
                .store_uint(0x0f8a7ea5, 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount)
                .store_slice(addr)
                .store_slice(addr)
                .store_uint(0, 1)
                .store_coins(1)
                .store_uint(0, 1)
                .end_cell();

            cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(20000000)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(body)
                .end_cell();
            send_raw_message(msg, 1);


            (key, val, flag) = users.udict_get_next?(256, key);
        }

    }




}


cell get_users() method_id {
    (_, cell users) = load_data();
    return users;
}


int get_user_share(slice user) method_id {
    (_, cell users) = load_data();
    (_, int u) = parse_std_addr(user);
    (slice value, int flag) = users.udict_get?(256, u);
    return value~load_uint(32);
}