#include "imports/stdlib.fc";

(int, int, slice, int) load_data () inline {
    var ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() save_data (int public_key, int execution_time, slice receiver, int seqno) impure inline {
    set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time, 32).store_slice(receiver).store_uint(seqno, 32).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);
	int query_id = in_msg~load_uint(64);

    (int public_key, int execution_time, slice receiver, int seqno) = load_data();



    if (op == 0x9df10277) {
        slice signature = in_msg~load_bits(512);
        cell body = in_msg~load_ref();
        int hash = cell_hash(body);
        slice s = body.begin_parse();
        int locked_for = s~load_uint(32);
        int new_seqno = s~load_uint(32);
        if (new_seqno != seqno + 1) {
            throw(119);
        }
        if (~ check_signature(hash, signature, public_key)) {
            throw(120);
        }
        if (locked_for <= 0) {
            throw(121);
        }
        if (execution_time < now()) {
            throw(122);
        }
        if (now() + locked_for <= execution_time) {
            throw(123);
        }
        accept_message();
        save_data(public_key, now() + locked_for, receiver, new_seqno);
    }

    if (op == 0xbb4be234) {
        if (now() < execution_time) {
            throw(124);
        }
        ;; throw_if(124, now() < execution_time);
        accept_message();
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(receiver)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32)
        .end_cell();
        send_raw_message(msg, 128); 
    }


}

int get_seqno() method_id {
    (_, _, _, int seqno) = load_data();
    return seqno;
}

int get_execution_time() method_id {
    (_, int execution_time, _, _) = load_data();
    return execution_time;
}