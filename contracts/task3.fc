#include "imports/stdlib.fc";

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    int expected_version = in_msg_body~load_uint(32);
    cell expected_code = in_msg_body~load_maybe_ref();
    cell migrations = in_msg_body~load_dict();
    cell payload = in_msg_body~load_ref();

    slice ds = get_data().begin_parse();
    cell storage = ds~load_ref();
    
    storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());

    set_data(wrap_storage(-2, storage));
}

cell get_storage() {
    slice cs = get_data().begin_parse();

    cell storage = cs~load_ref();

    return storage;
}

cell wrap_storage(int version_id, cell storage) {
    ;; add additional data required for versioning in this cell
    return begin_cell()
        .store_ref(storage)
        .store_uint(version_id, 32)
    .end_cell();
}

;; Return the current version of the smart contract
int version() method_id {
    return -2; ;; Not implemented
}

;; <<<<< 

cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; >>>>>
