#include "imports/stdlib.fc";



cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body);
cell migrate_one(cell old_storage);

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
  int expected_version = in_msg_body~load_uint(32);
  if(~ expected_version) {
    set_data(begin_cell()
            .store_uint(1, 32)
            .store_ref(get_data())
            .end_cell());
    return();
  }

  cell code = in_msg_body~load_maybe_ref();
  cell migs = in_msg_body~load_dict();
  cell payload = in_msg_body.preload_ref();
  
  slice cs = get_data().begin_parse();
  var stored_version = cs~load_uint(32);
  var storage = cs.preload_ref();
  
  if (expected_version != stored_version) {
    throw_if(200, null?(code));

    do {
      var (mig, found) = migs.udict_get?(32, stored_version);
      ifnot (found) { throw(400); }
      stored_version = mig~load_uint(32);
      var migcode = mig.preload_maybe_ref();
      ifnot (null?(migcode)) {
        set_c3(bless(migcode.begin_parse()));
        storage = migrate_one(storage);
      }
    } until (stored_version == expected_version);
    
    set_code(code);
    set_c3(bless(code.begin_parse()));

  }

  storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());

  set_data(begin_cell()
          .store_uint(stored_version, 32)
          .store_ref(storage)
          .end_cell());
}

cell get_storage() inline {
  return get_data().begin_parse().preload_ref();
}

cell wrap_storage(int version_id, cell storage) inline {
  return begin_cell()
    .store_uint(version_id, 32)
    .store_ref(storage)
    .end_cell();
}

int version() method_id {
  return get_data().begin_parse().load_uint(32);
}

;; <<<<< 
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) {
    return old_storage;
}

;;  >>>>>